package it.unitn.LODE.services.accessibility_old;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 * @author Alberto
 * Class to provide full user-side setup on off-line application
 */
public class Setup{

	private String currentpath;
	private String lodecfgpath;
	private String startprg;
	private String FS;

	public Setup()
	{
		FS = File.separator;
		try {
			currentpath = new File(".").getCanonicalPath();
		} catch (IOException e) {	} //There is always a '.' directory on the FileSystem;
		//Step 1: Check OS and set lode.cfg Path and start program
		if(!checkOS())
		{
			JOptionPane.showMessageDialog(null, "We are sorry. Unsupported OS");
			System.out.println("We are sorry. Unsupported OS");
			
			System.exit(0);
		}
		//Step 2: Create file and folder
		if(!createFiles())
		{
			JOptionPane.showMessageDialog(null, "Some problems occorred when trying to write to disk");
			System.out.println("Some problems occorred when trying to write to disk");
			
			System.exit(1);
		}
		//Step 3: Launch starter.html
		if(!startApp())
		{
			JOptionPane.showMessageDialog(null, "Problem launching browser. Try yourself opening file \"files/starter.html\"");
			System.out.println("Problem launching browser. Try yourself opening file \"files/starter.html\"");
		}
		
	}
	
	private boolean createFiles()
	{
		try
		{
		if(!(new File(lodecfgpath).exists()))
		{
			new File(lodecfgpath).mkdirs();
		}
		File lodecfg = new File(lodecfgpath+FS+"lode.cfg");
		lodecfg.createNewFile();
		BufferedWriter bw = new BufferedWriter(new FileWriter(lodecfg));
		bw.write("#Autogenerated by LODEScript\n");
		bw.write(currentpath);
		bw.flush();
		bw.close();
		} catch (IOException e) {return false;}
		return true;
	}
	
	private boolean startApp()
	{
		if(!new File("."+FS+"files"+FS+"starter.html").exists())
		{
			return false;
		}
		try {
			Runtime.getRuntime().exec(startprg+" ."+FS+"files"+FS+"starter.html");
		} 
		catch (IOException e) {e.printStackTrace(); return false;}
		return true;
	}
	
	private boolean checkOS()
	{
		String osname = System.getProperty("os.name");
		if(osname.toLowerCase().contains("mac os x"))
		{
			lodecfgpath = System.getenv("HOME")+FS+"Library"+FS+"Preferences"+FS+"Macromedia"+FS+"Flash Player"+FS+"#Security"+FS+"FlashPlayerTrust";
			startprg = "open";
			return true;
		}
		else if(osname.toLowerCase().contains("windows"))
		{
			lodecfgpath = System.getenv("APPDATA")+FS+"Macromedia"+FS+"Flash Player"+FS+"#Security"+FS+"FlashPlayerTrust";
			startprg = "cmd.exe /C start";
			return true;
		}
		else if(osname.toLowerCase().contains("linux"))
		{
			lodecfgpath = System.getenv("HOME")+FS+".macromedia"+FS+"Flash_Player"+FS+"#Security"+FS+"FlashPlayerTrust";
			startprg = "xdg-open";
			return true;
		}
		else if(osname.toLowerCase().contains("freebsd"))
		{
			lodecfgpath = System.getenv("HOME")+FS+".macromedia"+FS+"Flash_Player"+FS+"#Security"+FS+"FlashPlayerTrust";
			startprg = "xdg-open";
			return true;
		}
		else //Unmatched OS
		{
			return false;
		}
	}
	
	public static void main(String args[])
	{
		try {
	        UIManager.setLookAndFeel(
	            UIManager.getSystemLookAndFeelClassName());
	    } catch (Exception e) { }


		new Setup();
	}
}
