/*
 * InspectorWindow.java
 *
 * Created on 10 agosto 2008, 9.20
 */

package it.unitn.LODE.gui;

import it.unitn.LODE.Controllers.ControllersManager;
import it.unitn.LODE.LODE;
import it.unitn.LODE.MP.utils.SystemProps;
import java.awt.MenuBar;
import java.awt.Window;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.peer.ComponentPeer;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JMenuBar;

/**
 *
 * @author  ronchet
 */
public class InspectorWindow extends javax.swing.JFrame implements WindowListener {
@SuppressWarnings("deprecation")
public static void setWindowAlpha(Window w, float alpha) throws IllegalArgumentException, InvocationTargetException {
    ComponentPeer peer = w.getPeer();
    if (peer == null) {
        return;
    }
    Class< ? extends ComponentPeer> peerClass = peer.getClass();

    //noinspection EmptyCatchBlock
    try {
        Class< ?> nativeClass = Class.forName("apple.awt.CWindow");
        if (nativeClass.isAssignableFrom(peerClass)) {
            Method setAlpha = nativeClass.getMethod(
                    "setAlpha", float.class);
            setAlpha.invoke(peer, Math.max(0.0f, Math.min(alpha, 1.0f)));
      }
    } catch (ClassNotFoundException e) {
    } catch (NoSuchMethodException e) {
    } catch (IllegalAccessException e) {
    } catch (InvocationTargetException e) {
    }
}

    // ========== SOLITON PATTERN ==============================================
    static InspectorWindow instance=null;
    public synchronized static InspectorWindow getInstance(){
        if (instance==null) {
            instance=new InspectorWindow();
        }
        return instance;
    }
 
    /** Creates new form InspectorWindow */
    private InspectorWindow() {
        initComponents();
        addWindowListener(this);
        if (SystemProps.IS_OS_MAC_OSX) { // on other platforms it should use JMenuManager
            MenuManager menuGenerator=MenuManager.getInstance();
            MenuBar mb=menuGenerator.createMenuBar();
            if (mb!=null) {
                setMenuBar(mb);
            } else {
                JMenuBar jmb=menuGenerator.createJMenuBar();
                if (jmb==null) throw new RuntimeException("INTERNAL ERROR - Both MenuBar and JMenuBar are null in InspectorWindow");
                setJMenuBar(jmb);
            }
        //WIN-EXT B
        } else {
            MenuManager menuGenerator=MenuManager.getInstance();
            MenuBar mb=menuGenerator.createMenuBar();
            JMenuBar jmb=menuGenerator.createJMenuBar();

            JFrame menuFrame=new JFrame();
            menuFrame.addWindowListener(this);
            menuFrame.setJMenuBar(jmb);
            menuFrame.setSize(400, 60);
	    menuFrame.setVisible(true);
            this.setLocation(0, 60);
        }
        //WIN-EXT E

        instance=this;
    }
    //==========================================================================
    
    public void writeMessage(String s){
        messages_IW.writeMessage(s);
    }
    public void writeMessage(String s, int c){
        messages_IW.writeMessage(s,c);
    }
    public void update() {
        coursePanel.update();
        lecturePanel.update();
        try {
            setWindowAlpha(this, 0.4f);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(InspectorWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(InspectorWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messages_IW1 = new it.unitn.LODE.gui.Messages_IW();
        lecturePanel = new it.unitn.LODE.gui.LecturePane_IW();
        coursePanel = new it.unitn.LODE.gui.CoursePane_IW();
        messages_IW = new it.unitn.LODE.gui.Messages_IW();

        messages_IW1.setName("messages_IW1"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Inspector");
        setResizable(false);

        lecturePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lecturePanel.setName("lecturePanel"); // NOI18N

        coursePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        coursePanel.setName("coursePanel"); // NOI18N

        messages_IW.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        messages_IW.setName("messages_IW"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(coursePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
            .add(lecturePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
            .add(messages_IW, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(messages_IW, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lecturePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(coursePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InspectorWindow().setVisible(true);
            }
        });
    }

    //==========================================================================    
    // ===============  WINDOW MANAGEMENT ======================================
    //==========================================================================    
    // ============ WINDOW LISTENER METHODS ====================================
    public void windowOpened(WindowEvent e) { }
    public void windowClosing(WindowEvent e) {
        AcquisitionWindow aw=ControllersManager.getinstance().getAcquisitionWindow();
        if (aw!=null) aw.closeWindow();
        LODE.getInstance().cleanup();
       System.exit(0);
    }
    public void windowClosed(WindowEvent e) {}
    public void windowIconified(WindowEvent e) {}
    public void windowDeiconified(WindowEvent e) {}
    public void windowActivated(WindowEvent e) {}
    public void windowDeactivated(WindowEvent e) {}
 
    //==========================================================================    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private it.unitn.LODE.gui.CoursePane_IW coursePanel;
    private it.unitn.LODE.gui.LecturePane_IW lecturePanel;
    private it.unitn.LODE.gui.Messages_IW messages_IW;
    private it.unitn.LODE.gui.Messages_IW messages_IW1;
    // End of variables declaration//GEN-END:variables



}
